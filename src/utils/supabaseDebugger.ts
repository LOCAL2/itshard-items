// Debug Utility ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Supabase - ItsHard Items Management System
// ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Supabase

import { supabase } from '@/lib/supabase';

export class SupabaseDebugger {
  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase
   */
  static async checkConnection(): Promise<boolean> {
    try {
      const { data, error } = await supabase
        .from('members')
        .select('count')
        .limit(1);
      
      if (error) {
        console.error('Connection error:', error);
        return false;
      }
      
      console.log('‚úÖ Supabase connection successful');
      return true;
    } catch (error) {
      console.error('‚ùå Supabase connection failed:', error);
      return false;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RLS policies
   */
  static async checkRLSPolicies(): Promise<void> {
    try {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö SELECT
      const { data: selectData, error: selectError } = await supabase
        .from('members')
        .select('*')
        .limit(1);
      
      if (selectError) {
        console.error('‚ùå SELECT policy error:', selectError);
      } else {
        console.log('‚úÖ SELECT policy working');
      }

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö INSERT
      const testMember = {
        name: 'Test Member',
        status: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á',
        avatar: 'https://example.com/test.jpg'
      };

      const { data: insertData, error: insertError } = await supabase
        .from('members')
        .insert([testMember])
        .select();

      if (insertError) {
        console.error('‚ùå INSERT policy error:', insertError);
      } else {
        console.log('‚úÖ INSERT policy working');
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        if (insertData && insertData[0]) {
          await supabase
            .from('members')
            .delete()
            .eq('id', insertData[0].id);
        }
      }

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö UPDATE
      const { data: members } = await supabase
        .from('members')
        .select('id')
        .limit(1);

      if (members && members.length > 0) {
        const { error: updateError } = await supabase
          .from('members')
          .update({ updated_at: new Date().toISOString() })
          .eq('id', members[0].id);

        if (updateError) {
          console.error('‚ùå UPDATE policy error:', updateError);
        } else {
          console.log('‚úÖ UPDATE policy working');
        }
      }

    } catch (error) {
      console.error('‚ùå RLS policy check failed:', error);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
   */
  static async checkTableData(): Promise<void> {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö members
      const { data: members, error: membersError } = await supabase
        .from('members')
        .select('*');

      if (membersError) {
        console.error('‚ùå Members table error:', membersError);
      } else {
        console.log(`‚úÖ Members table: ${members?.length || 0} records`);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö items
      const { data: items, error: itemsError } = await supabase
        .from('items')
        .select('*');

      if (itemsError) {
        console.error('‚ùå Items table error:', itemsError);
      } else {
        console.log(`‚úÖ Items table: ${items?.length || 0} records`);
      }

    } catch (error) {
      console.error('‚ùå Table data check failed:', error);
    }
  }

  /**
   * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï item
   */
  static async testUpdateItem(itemId: string): Promise<boolean> {
    try {
      console.log(`Testing update for item ID: ${itemId}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ item ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const { data: existingItem, error: selectError } = await supabase
        .from('items')
        .select('*')
        .eq('id', itemId)
        .single();

      if (selectError) {
        console.error('‚ùå Item not found:', selectError);
        return false;
      }

      console.log('‚úÖ Item found:', existingItem);

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      const { data: updatedItem, error: updateError } = await supabase
        .from('items')
        .update({ 
          updated_at: new Date().toISOString(),
          item_name: existingItem.item_name + ' (updated)'
        })
        .eq('id', itemId)
        .select();

      if (updateError) {
        console.error('‚ùå Update failed:', updateError);
        return false;
      }

      console.log('‚úÖ Update successful:', updatedItem);

      // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°
      await supabase
        .from('items')
        .update({ 
          item_name: existingItem.item_name,
          updated_at: existingItem.updated_at
        })
        .eq('id', itemId);

      return true;

    } catch (error) {
      console.error('‚ùå Test update failed:', error);
      return false;
    }
  }

  /**
   * ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  static async runFullDiagnostic(): Promise<void> {
    console.log('üîç Starting Supabase diagnostic...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    const isConnected = await this.checkConnection();
    if (!isConnected) {
      console.error('‚ùå Cannot proceed - connection failed');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    await this.checkTableData();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RLS policies
    await this.checkRLSPolicies();

    console.log('‚úÖ Diagnostic completed');
  }

  /**
   * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ RLS policies
   */
  static async fixRLSPolicies(): Promise<void> {
    console.log('üîß Attempting to fix RLS policies...');
    
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç policies
      const fixSQL = `
        -- ‡∏•‡∏ö policies ‡πÄ‡∏î‡∏¥‡∏°
        DROP POLICY IF EXISTS "Members are viewable by everyone" ON members;
        DROP POLICY IF EXISTS "Members are editable by authenticated users" ON members;
        DROP POLICY IF EXISTS "Items are viewable by everyone" ON items;
        DROP POLICY IF EXISTS "Items are editable by authenticated users" ON items;

        -- ‡∏™‡∏£‡πâ‡∏≤‡∏á policies ‡πÉ‡∏´‡∏°‡πà
        CREATE POLICY "Enable read access for all users" ON members FOR SELECT USING (true);
        CREATE POLICY "Enable insert for all users" ON members FOR INSERT WITH CHECK (true);
        CREATE POLICY "Enable update for all users" ON members FOR UPDATE USING (true);
        CREATE POLICY "Enable delete for all users" ON members FOR DELETE USING (true);

        CREATE POLICY "Enable read access for all users" ON items FOR SELECT USING (true);
        CREATE POLICY "Enable insert for all users" ON items FOR INSERT WITH CHECK (true);
        CREATE POLICY "Enable update for all users" ON items FOR UPDATE USING (true);
        CREATE POLICY "Enable delete for all users" ON items FOR DELETE USING (true);
      `;

      console.log('üìù Please run this SQL in Supabase Dashboard:');
      console.log(fixSQL);

    } catch (error) {
      console.error('‚ùå Failed to generate fix SQL:', error);
    }
  }
}

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
export const supabaseDebugger = SupabaseDebugger;

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
/*
// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
SupabaseDebugger.runFullDiagnostic();

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
SupabaseDebugger.checkConnection();

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï item
SupabaseDebugger.testUpdateItem('your-item-id');

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ RLS policies
SupabaseDebugger.fixRLSPolicies();
*/

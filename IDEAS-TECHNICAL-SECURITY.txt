TECHNICAL, SECURITY, AND PERFORMANCE IDEAS

Security & Auth
- Migrate manager auth to Supabase Auth (email/password or OTP)
- Role-based access via `profiles.role` (admin/manager/member)
- Harden RLS: public read-only; writes only for authenticated roles
- Remove hardcoded PIN from client; verify PIN server-side if needed
- Use Edge Function or Postgres RPC to perform privileged writes
- Hash and salt any PIN/secret; never store plaintext
- Rate limit sensitive endpoints (PIN attempts) at server or edge

RLS & Database Policies
- Review and remove permissive policies in `fix-rls-policies.sql`
- Split read vs write policies per table: items, members, schedules
- Add `created_by`, `updated_by` (uuid) columns and enforce via `auth.uid()`
- Audit trails table for critical actions (insert/update/delete)
- Use `SECURITY DEFINER` functions carefully with input validation

Data Model & Migrations
- Separate `schedules` into dedicated table: item_id, start, end, note
- Add `tags` table and item_tags join for flexible categorization
- Add soft-delete columns (`deleted_at`) with RLS filtering
- Add unique indexes where appropriate (e.g., natural keys for items)

Performance
- Add server-side pagination for large item/member lists
- Introduce composite indexes (e.g., schedules by start/end)
- Use realtime selectively; throttle UI refresh to 250ms
- Virtualize long tables (react-virtualized/react-virtuoso)
- Bundle splitting and route-level code-splitting (Vite dynamic import)
- Memoize heavy components and list rows; avoid unnecessary re-renders

API & Networking
- Centralize Supabase client calls with typed wrappers
- Retry with backoff for transient network errors
- Circuit breaker for failing endpoints (e.g., 406 spam prevention)
- Standardize error objects; attach correlation IDs for logs

Testing & Quality
- Unit tests for utilities (schedules, formatting, session)
- Component tests for forms and tables (Playwright/React Testing Library)
- e2e smoke tests: login, add item, schedule, edit member, logout
- Lint staged changes pre-commit; CI pipeline with type-check and lint

Observability & Logs
- Client-side event logging (view, edit, delete) with opt-in
- Server logs for edge functions with structured fields
- Dashboards for error rates and performance timings

DX (Developer Experience)
- Create dedicated `api/` folder for RPC wrappers & types
- Generate types from Supabase via `supabase gen types typescript`
- Add `.env.example` for all needed keys and strict runtime checks
- Prettier config alignment; enforce consistent import order
- Scripts: `dev:mock` for local data, `dev:seed` for sample content

Resilience
- Graceful offline mode with IndexedDB cache for items/members
- Background sync queue for offline writes (conflict resolution)
- Snapshot/restore local drafts with time machine (per day)

Security Hardening (Frontend)
- Hide sensitive strings; use runtime-injected config where possible
- CSP headers, SRI for external assets, and strict `referrerPolicy`
- Sanitize user input; escape when rendering untrusted content

PWA Enhancements
- Service worker with stale-while-revalidate strategy
- Push notifications for schedule reminders (with user consent)
- App manifest with icons/splash screens for multiple sizes

Backup & Maintenance
- Nightly export of critical tables (items, members, schedules)
- Migration history and rollback plan documentation
- Automated cleanup for orphaned schedules or deleted items

